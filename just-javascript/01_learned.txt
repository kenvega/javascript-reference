source: https://justjavascript.com/learn

the javascript universe

  what is your code (difference with values)
    your code is not the values you use
    your code interacts with values
    your code is a list of instructions
      if statements, variable declarations, function calls, loops, throws of errors

  primitive values are like distant stars
    you can only point to them
    but you can't create OR destroy OR change them

  objects and functions are like near asteroids
    they are also not part of your code
    but you can manipulate them
    these are also values
    * functions are also objects but with unique features

  types of values
    values of the same type behave similarly
    up to this time there are 9 types

    all primitive types of values
      undefined - unintentionally missing values
      null - intentionally missing values
      booleans 
      numbers - 100, 3.14 
      bigints - for math on big numbers
      strings
      symbols

    the other types - objects and functions
      objects - to group related data
      functions - to refer to code

    there are no more types, the rest are just objects
      arrays, dates, regexs are objects

    not everything is an object in javascript
      for example: "hi".toUpperCase() makes appear that "hi" is an object
        but javascript really creates a temporary object to do this

    checking a type
      the function typeof is like a telescope
        to see the asteroids and distant stars and see what types they have

  expressions
    expressions are questions that javascript can answer
    the answers will always come from javascript as values
    expressions are not values but rather javascript respond to them with values
    expression is a piece of code that
      expresses a value
      evaluates to a value
      results in a value
    examples
      2 + 2 // 4
      typeof(4) // number
      5 // this is a literal expression (can also call it a number literal)
        //   we literally write the expression with the result value
      {} // this is an object literal - an object as an expression

values and variables

  primitive values are inmutable
    we can't change primitive values
    inmutable = unchangeable = read-only

    strings mike behave like arrays when accessing the items/characters
      but you can change in arrays the items value
      while you can't change in strings the character
      because arrays are not primitive values

    javascript will never let you change a property of a primitive value
      doesn't matter if it is a string, number, etc

  variables are wires
    variables are not values
    variables are wires that point to values
    variables don't point to other variables nor expressions
    variables don't have types, only values do
    you can't pass a variable to a function, you can only pass values
      but still: when passing a mutable value to a function, you will be able to change the value passed

    assigning variables to values
      let pet = 'Narwhal';
        assigning the value "Narwhal" to the variable called pet
        or also works:
        point the pet variable to the "Narwhal" value

    rules of assignments
      the left side of assignment needs to be a variable
      the right side of assignment needs to be an expression
        this ensures the right side will always end up being a value
      so in general a wire on the left, and a expression on the right
      you could say that assignment is to
        connect a variable on the left with the current value on the right
        and do nothing more than that.

    reading the value of a variable
      variables can also work as expressions so you can get the current value
      in argument functions, we don't pass variables to functions
        we pass the current value of the variable to the function

studying from the inside
  this course says they won't focus on studying javascript from the outside. this includes things like:
    how javascript values are represented in machines' memories
    strings are actually a sequence of bytes stored in a chip

  rather we will only study javascript from the inside: learning without thinking how it is implemented
    check wires and expressions
    here a string is a value, not a pointer, not a memory address
    also don't focus on things like: "passing by reference", "allocating on stack", "copying on write"
    that's good enough for the mental model
    * this is like studying the properties of a star without questioning if the star really exists

meeting the primitive values

  undefined
    there is only one value of this type of undefined variable: undefined
      console.log(typeof(undefined)); // "undefined"
    reading a property from this value breaks your code
    occurs naturally when javascript doesn't know what value you wanted
      example: forgetting to give a value to a variable will default to undefined
      after a variable is declared, it always points to a value
        if not specified where to point to, it will point to undefined

    it doesn't exactly mean that a variable is not defined yet
      if you try to read a variable before its declaration you will get an error
        console.log(someVariable); // ReferenceError!
        let someVariable;

      undefined it's just a regular primitive value like true, 2 or "hello there"

  null
    there is also only one value of this type: null
      *but unlike undefined the typeof function will throw "object" instead of "null" because of a bug in javascript
        console.log(typeof(null)); // "object" <- this is a bug in js because null is not an object
          more on this here: https://2ality.com/2013/10/typeof-null.html

        null is not an object but a primitive value

    it will also throw errors if you try to access its properties

    normally it's used for intentional missing values
      so we can distinguish possible mistakes from real ones related to missing values

  booleans
    there are only two values for this type
      console.log(typeof(true)); // "boolean"
      console.log(typeof(false)); // "boolean"

    in our mental model, only these two values exist one time each
      regardless of how memory works under the hood in our machines

  numbers
    they don't behave exactly as regular mathematical numbers
      console.log(0.1 + 0.2 === 0.3); // false
      console.log(0.1 + 0.2 === 0.30000000000000004); // true

    it uses floating point math (or math for computers)
      don't worry too much about this unless you work in a finance app
      more info here: https://floating-point-gui.de/formats/fp/

    all variables of type number exist in this range
      Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER
      trying to add 1 or more to this will cause errors in javascript
        console.log(Number.MAX_SAFE_INTEGER);     // 9007199254740991
        console.log(Number.MAX_SAFE_INTEGER + 1); // 9007199254740992
        console.log(Number.MAX_SAFE_INTEGER + 2); // 9007199254740992 (again!)
        console.log(Number.MAX_SAFE_INTEGER + 3); // 9007199254740994
        console.log(Number.MAX_SAFE_INTEGER + 4); // 9007199254740996
        console.log(Number.MAX_SAFE_INTEGER + 5); // 9007199254740996 (again!)

    special numbers exist in javascript too
      NaN, Infinity, -Infinity, -0

      let scale = 0;
      let a = 1 / scale; // Infinity
      let b = 0 / scale; // NaN <- not a number. this is for invalid results
      let c = -a; // -Infinity
      let d = 1 / c; // -0

      NaN is still a number type variable
        console.log(typeof(NaN)); // "number"
          it's just that its numeric value is not a valid one

  bigints
    more precise... i guess
    (???)

  strings
    you can use single quotes, double quotes, or backticks to write them

    they have some built in properties
      let cat = 'Cheshire';
      console.log(cat.length); // 8
      console.log(cat[0]); // "C"
      console.log(cat[1]); // #"h"

    but this doesn't mean string are objects
      if they were objects you could change the properties of them and you can't
        because primitives values are inmutable
        you can't assign cat[0] to another value

    in our mental model, all possible string values already exist in our universe from the beginning
      not really possible for a chip to store all possible string values, but it is possible to have that idea in our mental model
      we can't really test this outside of our mental model so take this as a convention

  symbols
    they are like door keys:
      you can hide information inside objects
      you can control which parts of your code can access those hidden parts

meeting objects and functions 

  intro to non-primitive values
    these are objects and functions
    unlike primitive types, these types lets make our own values
    for primitive you summon the already existing values like numbers
    for non primitive, you create new values like objects

  objects

    objects cover arrays, dates, RegExps, and others
      console.log(typeof({})); // "object"
      console.log(typeof([])); // "object"
      console.log(typeof(new Date())); // "object"
      console.log(typeof(/\d+/)); // "object"
      console.log(typeof(Math)); // "object"

    being non-primitive means they are mutable, so we can change them
      we can access/change their properties with . or []
      e.g.
        let teacher = { name: 'Dan' };
        teacher.name = 'Nad'; // Dot notation
        teacher['name'] = 'And'; // Bracket notation

    primitive values always exists from the start
      but with non primitive values like objects, you can create more of them

        for our mental model, this means that primitive values are unique
          but objects can have exact same value and still be different

          let shrek = {}; // new object
          let donkey = {}; // not the same object from line before

          this also applies for all coming from objects like arrays, dates, etc

    we can't destroy objects with code, but javascript garbage collect them instead

    in our mental model, objects float near to us
      meaning that we can manipulate them and create more of them

  functions

    functions are also values
      just like numbers, or objects
      this means variables can point to them

      e.g.
        function() {} // this is basically a expression so it evaluates to a value
          // even without been invoked it's still considered a value
          // it's called a function value
          // when a function is called, the result it's called a call expression

    because functions are also values, they can be printed to console too as functions
      if you don't call the function, the value printed will be the function itself

      e.g.
        let countWonders = function() { return 7; };
        let wonders = countWonders
        console.log(wonders); // logs the function, not 7

    they are also created every time you reach them in your code (like objects)
      e.g.

      // this passes the same unique value 2 seven times to console.log
      for (let i = 0; i < 7; i++) {
        console.log(2);
      }

      // a new object is created every time it is passed to console.log
      for (let i = 0; i < 7; i++) {
        console.log({});
      }

      // the same way, a new function is created every time is passed to console.log
      for (let i = 0; i < 7; i++) {
        console.log(function() {});
      }

      in general
        primitive values are always summoned
          because they already exist from the start

        functions and object type values are always created
          and every brand new object or function has a different value

    technically functions are objects in javascript

      if you can do something to an object, you can also do that to a function too

      but in our mental model they are separate types
        because they have different capabilities than regular objects

      * I made a test and I don't understand
        console.log(typeof function() {}) // function (?)

    the () changes the meaning of your code
      an assignment without the () means
        point my variable to the function value

      and an assignment with the () means
        point my variable to the value returned by the function

Equality of values

  There are three kinds of equality:

    Same Value Equality
      Object.is(a, b)

        this one fits with our mental model
        checks if a and b are the same value (point to the same value)
        it doesn't matter if you compare objects or not
        e.g.
          console.log(Object.is(2, 2)); // true
          console.log(Object.is({}, {})); // false


      example with objects

        let banana = {};
        let cherry = banana;
        let chocolate = cherry;
        cherry = {}; // cherry changes where is pointing to, but chocolate doesn't

        console.log(Object.is(banana, cherry)); // false
        console.log(Object.is(cherry, chocolate)); // false
        console.log(Object.is(chocolate, banana)); // true

    Strict equality
      a === b

      how it differs from Object.is?
        Object.is has a direct meaning in our mental model
          it's the idea of the same value in our universe

        with strict equality is almost the same
          but there are some specific cases that are exceptions to the rule

            Object.is(NaN, NaN) // true
            NaN === NaN // false, but there is only one NaN value in our universe
              // * note: NaN is the only value that's not Strict Equal to itself
                // so NaN !== NaN will always result in true
                // can be a way to check if a variable is NaN
                // why this happens? answer here: https://stackoverflow.com/a/1573715/458193


            -0 === 0 // true
            Object.is(-0, 0) // false, they are different values in our universe

        to make them basically the same function we could do this

          function strictEquals(a,b) {
            // first check if both are NaN
            if (Object.is(a, NaN) && Object.is(b, NaN)) return false

            // then check case -0 and 0,
            if ( (Object.is(a, 0) && Object.is(b, -0)) ||
                  (Object.is(a, -0) && Object.is(b, 0)) )
              return true

            // then return the same as Object.is
            return Object.is(a,b)
          }

          more answers here: https://gist.github.com/gaearon/08a85a33e3d08f3f2ca25fb17bd9d638

          in general, strict equality and same value equality are almost identical

    Loose Equality
      a == b

      you can find what happens when doing loose equality here
        https://dorey.github.io/JavaScript-Equality-Table/

      very uncommon in modern codebases as it is very confusing

Properties

  let sherlock = {
    surname: 'Holmes',
    address: { city: 'London' }
  };

  let john = {
    surname: 'Watson',
    address: sherlock.address
  };

  john.surname = 'Lennon';
  john.address.city = 'Malibu';

  console.log(sherlock.surname); // Holmes
  console.log(sherlock.address.city); // Malibu
  console.log(john.surname); // Lennon
  console.log(john.address.city); // Malibu

  properties are similar to variables
    properties act like wires to the values
      properties start from the objects and not from our code like variables
      properties don't contain values
      properties point to values
      the right side of an assignment of a property is also always an expression

    property names are case sensitive and unique
      object.age is not the same as object.Age

  trying to access a property that is not pointing to anything returns undefined

  trying to access a property from an object that is null or undefined will throw an error always

  object nesting has no special meaning in our mental model
    because object nesting would be just objects pointing to other objects

  properties can't point to other properties or variables, only values

Mutation

  mutating an object it's basically changing an object's property

  thinking that objects are nested doesn't work for our mental model
    because it's not than an object pertain to one only object or many objects

    it is that an object can be pointed by many other objects

  // mutation example
  john.surname = 'Lennon';
  john.address.city = 'Malibu'; // mutating the object that john.address points to

  // workaround for mutation
  john.surname = 'Lennon';
  john.address = { city: 'Malibu' }; // creating a new object for john.address to points to
    // or also mutating the address property of the object pointed by the john variable

  



